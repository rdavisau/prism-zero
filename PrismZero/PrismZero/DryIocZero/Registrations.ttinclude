<#
// TODO:
// 1. Fill-in `GetContainerWithRegistrations` method below with creation of DryIoc `Container` and registrations.
// 2. Specify the resolution roots via `SpecifyResolutionRoots` method, see example below.
// 3. Re-save the "Container.Generated.tt" file. Confirm the Visual Studio prompt if any.
// 4. Check the "Container.Generated.cs" for the generated results and issues.
//
// Note: 
// - When specifying assembly path, you may use $(SolutionDir), $(ProjectDir), $(Configuration) parameters.
//
#>
<#@ assembly Name="netstandard" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="$(DryIocAssembly)" #>
<#@ assembly Name="$(ProjectDir)\bin\$(Configuration)\netstandard2.0\PrismZero.dll" #>
<#@ assembly Name="%USERPROFILE%\.nuget\packages\microsoft.extensions.dependencymodel\3.1.0\lib\netstandard2.0\Microsoft.Extensions.DependencyModel.dll" #>
<#@ assembly Name="%USERPROFILE%\.nuget\packages\system.text.json\4.7.0\lib\netstandard2.0\system.text.json.dll" #>
<#@ assembly Name="%USERPROFILE%\.nuget\packages\system.runtime.compilerservices.unsafe\4.7.0\lib\netstandard2.0\System.Runtime.CompilerServices.Unsafe.dll" #>
<#@ assembly Name="%USERPROFILE%\.nuget\packages\system.buffers\4.4.0\lib\netstandard2.0\System.Buffers.dll" #>
<#@ import Namespace="PrismZero" #>
<#@ import Namespace="PrismZero.Views" #>
<#@ import Namespace="PrismZero.Services" #>
<#@ import Namespace="System" #>
<#@ import Namespace="System.Collections.Generic" #>
<#@ import Namespace="System.Linq" #>
<#@ import Namespace="System.Reflection" #> 
<#@ import Namespace="DryIoc" #>
<#@ import Namespace="ImTools" #>
<#+

public HashSet<(Type type, object key)> RegisteredServices = new HashSet<(Type, object)>();
public List<(string Page, string ViewModel)> PageTypes = new List<(string, string)>();

// TODO: Specify the container and registrations ...
IContainer GetContainerWithRegistrations()
{
    var container = 
        new Container(rules => 
            rules.WithoutThrowOnRegisteringDisposableTransient()
                 .WithAutoConcreteTypeResolution()
                 .With(Made.Of(FactoryMethod.ConstructorWithResolvableArguments))
                 .WithoutThrowOnRegisteringDisposableTransient()
                 .WithFuncAndLazyWithoutRegistration()
                 .WithDefaultIfAlreadyRegistered(IfAlreadyRegistered.Replace));

    var asm = typeof(ServiceBase).Assembly;
    asm = LoadAssemblyWithDependencies(asm.Location);
	      
    RegisterPrismTypes(asm, container);
    RegisterServices(asm, container);
    RegisterViews(asm, container);

    // since the container extension depends on the generated container
    // we register this as a placeholder
    container.RegisterPlaceholder(FindType("Prism.Ioc.IContainerExtension"));

    // inspect the container for registrations so we can generate a crude 
    // IsRegistered implementation
    WriteRegistrations(container);

    return container;
}

public void RegisterPrismTypes(Assembly asm, IContainer container)
{
    var types = new Dictionary<Type, Type>
    {
        [FindType("Prism.Navigation.INavigationService")] = FindType("Prism.Navigation.PageNavigationService"),
        [FindType("Prism.Behaviors.IPageBehaviorFactory")] = FindType("Prism.Behaviors.PageBehaviorFactory"),
        [FindType("Prism.Common.IApplicationProvider")] = FindType("Prism.Common.ApplicationProvider"),
        [FindType("Prism.Logging.ILoggerFacade")] = FindType("Prism.Logging.EmptyLogger"),
        [FindType("Prism.AppModel.IApplicationStore")] = FindType("Prism.AppModel.ApplicationStore"),
        [FindType("Prism.Events.IEventAggregator")] = FindType("Prism.Events.EventAggregator"),
        [FindType("Prism.Services.IPageDialogService")] = FindType("Prism.Services.PageDialogService"),
        [FindType("Prism.Services.Dialogs.IDialogService")] = FindType("Prism.Services.Dialogs.DialogService"),
        [FindType("Prism.Services.IDeviceService")] = FindType("Prism.Services.DeviceService"),
        [FindType("Prism.Modularity.IModuleCatalog")] = FindType("Prism.Modularity.ModuleCatalog"),
        [FindType("Prism.Modularity.IModuleManager")] = FindType("Prism.Modularity.ModuleManager"),
        [FindType("Prism.Modularity.IModuleInitializer")] = FindType("Prism.Modularity.ModuleInitializer")
    };

    foreach (var t in types)
        container.Register(t.Key, t.Value);

    // nav service needs to be registered with a service key too
    container.Register(
        FindType("Prism.Navigation.INavigationService"), 
        FindType("Prism.Navigation.PageNavigationService"), 
        serviceKey: "PageNavigationService");
} 

public void RegisterServices(Assembly asm, IContainer container)
{
    var serviceTypes = GetTypesFromAssembly(asm, t => t.IsSubclassOf(typeof(ServiceBase))).ToArray();
    
    foreach (var serviceType in serviceTypes)
        foreach (var @if in ReflectionTools.GetImplementedInterfaces(serviceType))
            container.Register(@if, serviceType, Reuse.Singleton);
}

public void RegisterViews(Assembly asm, IContainer container)
{
    var pageTypes = GetTypesFromAssembly(asm, t => t.IsSubclassOf(typeof(BasePage))).ToArray();

    // register nav page
    container.Register(typeof(object), FindType("Xamarin.Forms.NavigationPage"), serviceKey: "NavigationPage");

    // register all our pages and matching vm
    // assumes matching vm exists, 1->1 relationship, ignores namespaces, etc.
    // this might not be valid for you, in which case this will blow up
    foreach(var pageType in pageTypes)
    {
        var vmType = GetTypesFromAssembly(asm, t => t.Name == pageType.Name + "ViewModel").First();
        
        // register page type
        container.Register(pageType);

        // prism wants it as a named registration against object, so maybe the above is unneccessary 
        container.Register(typeof(object), pageType, serviceKey: pageType.Name); 
        
        // register the vm
        container.Register(vmType);

        // keep track of the pair of types so we can generate our "register pages" method later
        PageTypes.Add(($"{pageType.Namespace}.{pageType.Name}", $"{vmType.Namespace}.{vmType.Name}"));
    }
}

// TODO: For each passed registration specify what resolution roots it provides, null if none
ServiceInfo[] SpecifyResolutionRoots(ServiceRegistrationInfo reg)
{
    // you should only return roots for types that need to be directly resolved
    // here we return roots for all types (bad)
    // more roots = more branches before hitting the resolve implementation
    return reg.ToServiceInfo().One();

    // if you annotate your registrations with the as resolution root flag then this rule is good
    // return reg.AsResolutionRoot ? reg.ToServiceInfo().One() : null;
}

// TODO: Additional roots to generate ...
ServiceInfo[] CustomResolutionRoots = {};

// TODO: Specify the namespace to go into using instead of qualify the type all the times, 
// You may generate the Container.Generated.cs first, then look what you want to move to using
string[] NamespaceUsings =
{
    //"Foo.Bar.Buzz",
};

public System.Reflection.Assembly LoadAssemblyWithDependencies(string assemblyPath)
{
	var coreLibPath = assemblyPath;
	var nuget = System.Environment.ExpandEnvironmentVariables(@"%USERPROFILE%\.nuget\packages");

	var dependencyContext =
		Microsoft.Extensions.DependencyModel.DependencyContextLoader
			.Default.Load(System.Reflection.Assembly.LoadFrom(coreLibPath));

	var libs =
		dependencyContext
			.RuntimeLibraries
			.SelectMany(r => r.RuntimeAssemblyGroups.SelectMany(bb => bb.RuntimeFiles),
				(r, bb) => new { r.Name, r.Version, bb.Path })
			.Where(r => !r.Name.StartsWith("runtime."))
			.Skip(1) // the dll comes first
			.ToList();

	foreach (var l in libs)
	{
		try 
        {
		    System.Reflection.Assembly.LoadFrom(System.IO.Path.Combine(nuget, l.Name, l.Version, l.Path));
		} 
		catch (Exception ex)
		{
            // break here to make sure nothing important is failing
            // non-package assemblies will definitely fail
		}
	}
	var coreLib = System.Reflection.Assembly.LoadFrom(coreLibPath);

	return coreLib;
}

public Type FindType(string name)
{
    return System
        .AppDomain
        .CurrentDomain
        .GetAssemblies()
        .SelectMany(GetLoadableTypes)
        .FirstOrDefault(t => t.FullName.EndsWith(name));
}

public IEnumerable<Type> GetTypesFromAssembly(Assembly asm, Func<Type, bool> predicate)
{
    foreach (var t in asm.GetLoadedTypes())
        if(predicate(t))
            yield return t;
}

public static IEnumerable<Type> GetLoadableTypes(Assembly assembly)
{
    if (assembly == null) throw new ArgumentNullException(nameof(assembly));

    try { return assembly.GetTypes(); }
    catch (ReflectionTypeLoadException e) { return e.Types.Where(t => t != null); }
}

void WriteRegistrations(IContainer container)
{
    // this is not perfect, considers placeholders to be registered
    // even if they haven't yet been filled etc.
    foreach(var reg in container.GetServiceRegistrations())
        RegisteredServices.Add((reg.ServiceType, reg.OptionalServiceKey));
}

#>